{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AWS MCP Servers","text":"<p>A suite of specialized MCP servers that help you get the most out of AWS, wherever you use MCP.</p>"},{"location":"#available-mcp-servers","title":"Available MCP Servers","text":""},{"location":"#core-mcp-server","title":"Core MCP Server","text":"<p>The Core MCP Server manages and coordinates other MCP servers in your environment, providing automatic installation, configuration, and management.</p> <p>Features:</p> <ul> <li>Automatic MCP Server Management</li> <li>Planning and guidance to orchestrate MCP Servers</li> <li>UVX Installation Support</li> <li>Centralized Configuration</li> </ul> <p>Learn more about the Core MCP Server</p>"},{"location":"#aws-documentation-mcp-server","title":"AWS Documentation MCP Server","text":"<p>The AWS Documentation MCP Server provides access to AWS documentation and best practices.</p> <p>Features:</p> <ul> <li>Search Documentation using the official AWS search API</li> <li>Get content recommendations for AWS documentation pages</li> <li>Convert documentation to markdown format</li> </ul> <p>Learn more about the AWS Documentation MCP Server</p>"},{"location":"#aws-cdk-mcp-server","title":"AWS CDK MCP Server","text":"<p>The CDK MCP Server provides AWS Cloud Development Kit (CDK) best practices, infrastructure as code patterns, and security compliance with CDK Nag.</p> <p>Features:</p> <ul> <li>CDK Best Practices</li> <li>CDK Nag Integration</li> <li>AWS Solutions Constructs</li> <li>GenAI CDK Constructs</li> </ul> <p>Learn more about the CDK MCP Server</p>"},{"location":"#amazon-nova-canvas-mcp-server","title":"Amazon Nova Canvas MCP Server","text":"<p>The Nova Canvas MCP Server enables AI assistants to generate images using Amazon Nova Canvas.</p> <p>Features:</p> <ul> <li>Text-based image generation</li> <li>Color-guided image generation</li> <li>Workspace integration</li> </ul> <p>Learn more about the Nova Canvas MCP Server</p>"},{"location":"#amazon-bedrock-knowledge-base-retrieval-mcp-server","title":"Amazon Bedrock Knowledge Base Retrieval MCP Server","text":"<p>The Bedrock Knowledge Base Retrieval MCP Server enables AI assistants to retrieve information from Amazon Bedrock Knowledge Bases.</p> <p>Features:</p> <ul> <li>Discover knowledge bases and their data sources</li> <li>Query knowledge bases with natural language</li> <li>Filter results by data source</li> <li>Rerank results</li> </ul> <p>Learn more about the Bedrock Knowledge Base Retrieval MCP Server</p>"},{"location":"#cost-analysis-mcp-server","title":"Cost Analysis MCP Server","text":"<p>The Cost Analysis MCP Server enables AI assistants to analyze the cost of AWS services.</p> <p>Features:</p> <ul> <li>Analyze and predict AWS costs before deployment</li> <li>Query cost data with natural language</li> <li>Generate cost reports and insights</li> </ul> <p>Learn more about the Cost Analysis MCP Server</p>"},{"location":"#aws-lambda-mcp-server","title":"AWS Lambda MCP Server","text":"<p>The AWS Lambda MCP Server enables AI assistants to select and run AWS Lambda functions as MCP tools.</p> <p>Features:</p> <ul> <li>Select and run AWS Lambda functions as MCP tools</li> <li>Tool names and descriptions are taken from the AWS Lambda function configuration</li> <li>Filter functions by name, tag, or both</li> <li>Use AWS credentials to invoke the Lambda functions</li> </ul> <p>Learn more about the AWS Lambda MCP Server</p>"},{"location":"#aws-diagram-mcp-server","title":"AWS Diagram MCP Server","text":"<p>This MCP server that seamlessly creates diagrams using the Python diagrams package DSL. This server allows you to generate AWS diagrams, sequence diagrams, flow diagrams, and class diagrams using Python code.</p> <p>Features:</p> <p>The Diagrams MCP Server provides the following capabilities:</p> <ol> <li>Generate Diagrams: Create professional diagrams using Python code</li> <li>Multiple Diagram Types: Support for AWS architecture, sequence diagrams, flow charts, class diagrams, and more</li> <li>Customization: Customize diagram appearance, layout, and styling</li> <li>Security: Code scanning to ensure secure diagram generation</li> </ol> <p>Learn more about the AWS Diagram MCP Server</p>"},{"location":"#aws-terraform-mcp-server","title":"AWS Terraform MCP Server","text":"<p>The Terraform MCP Server enables AWS best practices, infrastructure as code patterns, and security compliance with Checkov.</p> <p>Features:</p> <p>The Terraform MCP Server provides the following capabilities:</p> <ul> <li>Terraform Best Practices</li> <li>Security-First Development Workflow</li> <li>Checkov Integration</li> <li>AWS and AWSCC Provider Documentation</li> <li>AWS-IA GenAI Modules</li> <li>Terraform Workflow Execution</li> </ul> <p>Learn more about the AWS Terraform MCP Server</p>"},{"location":"#code-documentation-generation-mcp-server","title":"Code Documentation Generation MCP Server","text":"<p>The Code Documentation Generation MCP Server automatically generates comprehensive documentation for code repositories.</p> <p>Features:</p> <ul> <li>Automated documentation generation based on repository analysis</li> <li>AWS architecture diagram integration</li> <li>Multiple document types (README, API, Backend, Frontend)</li> <li>Interactive documentation creation workflow</li> </ul> <p>Learn more about the Code Documentation Generation MCP Server</p>"},{"location":"#aws-location-service-mcp-server","title":"AWS Location Service MCP Server","text":"<p>A server for accessing AWS Location Service capabilities, focusing on place search, geographical coordinates, and route planning.</p> <p>Features:</p> <ul> <li>Search for places using geocoding</li> <li>Get details for specific places by PlaceId</li> <li>Reverse geocode coordinates to addresses</li> <li>Search for places near a location</li> <li>Search for places that are currently open</li> <li>Calculate routes between locations with turn-by-turn directions</li> <li>Optimize waypoints for efficient routing</li> </ul> <p>Learn more about the AWS Location Service MCP Server</p>"},{"location":"#cloudformation-mcp-server","title":"CloudFormation MCP Server","text":"<p>A server for managing your AWS resources directly and through cloudformation.</p> <p>Features:</p> <ul> <li>Create/Update/Delete your resources with the resource access tools</li> <li>List/Read your resources with the resource access tools</li> </ul> <p>Learn more about the CloudFormation MCP Server</p>"},{"location":"#git-repo-research-mcp-server","title":"Git Repo Research MCP Server","text":"<p>A server for researching Git repositories using semantic search.</p> <p>Features:</p> <ul> <li>Repository Indexing with FAISS and Amazon Bedrock embeddings</li> <li>Semantic Search within repositories</li> <li>Repository Structure Analysis</li> <li>GitHub Repository Search in AWS organizations</li> <li>File Access with text and binary support</li> </ul> <p>Learn more about the Git Repo Research MCP Server</p>"},{"location":"#postgres-mcp-server","title":"Postgres MCP Server","text":"<p>A server for Aurora Postgres.</p> <p>Features:</p> <ul> <li>Converting human-readable questions and commands into structured Postgres-compatible SQL queries and executing them against the configured Aurora Postgres database</li> <li>Fetch table columns and comments from Postgres using RDS Data API</li> </ul> <p>Learn more about the Postgres MCP Server</p>"},{"location":"#installation-and-setup","title":"Installation and Setup","text":"<p>Please refer to the README files in each server's directory for specific installation instructions.</p>"},{"location":"#samples","title":"Samples","text":"<p>Please refer to the samples directory for examples of how to use the MCP Servers.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please see the contributing guidelines for more information.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>Before using an MCP Server, you should consider conducting your own independent assessment to ensure that your use would comply with your own specific security and quality control practices and standards, as well as the laws, rules, and regulations that govern you and your content.</p>"},{"location":"samples/","title":"AWS MCP Servers - Samples","text":"<p>This directory contains a collection of examples demonstrating how to use the AWS MCP Servers provided in the <code>src</code> directory. Each sample is organized into its own folder with relevant documentation and code.</p>"},{"location":"samples/#structure","title":"Structure","text":"<pre><code>samples/\n\u251c\u2500\u2500 project-name/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 (sample code and resources)\n</code></pre>"},{"location":"samples/#purpose","title":"Purpose","text":"<p>The samples in this directory provide:</p> <ul> <li>Working examples for each AWS MCP Server</li> <li>Integration patterns and best practices</li> <li>Code snippets for common use cases</li> <li>Step-by-step guides</li> </ul>"},{"location":"samples/#guidelines","title":"Guidelines","text":"<ul> <li>Each sample directory should focus on demonstrating one or more MCP servers</li> <li>All samples must include a README.md with clear instructions</li> <li>Samples should not introduce new MCP servers, but only demonstrate usage of existing ones</li> </ul>"},{"location":"samples/#available-samples","title":"Available Samples","text":""},{"location":"samples/#mcp-integration-with-kb","title":"MCP Integration with KB","text":"<p>A client that integrates with the Amazon Bedrock Knowledge Base MCP server. Code can be found in the mcp-integration-with-kb folder.</p>"},{"location":"samples/#coming-soon","title":"Coming Soon","text":""},{"location":"samples/#contributing","title":"Contributing","text":"<p>We welcome contributions of additional samples. Please ensure your sample follows the guidelines above and demonstrates real-world usage of the MCP servers.</p>"},{"location":"samples/mcp-integration-with-kb/","title":"MCP Integration with Amazon Bedrock Knowledge Bases","text":"<p>This repository outlines a basic implementation of the Model Context Protocol integration with Amazon Bedrock Knowledge Bases</p>"},{"location":"samples/mcp-integration-with-kb/#overview","title":"Overview","text":"<p>There are two parts to this implementation:</p> <ol> <li>The <code>user_interfaces/chat_bedrock_st.py</code> file, which handles the Streamlit/User Interface for the chatbot</li> <li>The <code>client_server.py</code> file, which handles the MCP client and server implementation</li> </ol> <p>The exact MCP server code used in this implementation can be found in the src/bedrock-kb-retrieval-mcp-server folder.</p>"},{"location":"samples/mcp-integration-with-kb/#architecture","title":"Architecture","text":""},{"location":"samples/mcp-integration-with-kb/#setup","title":"Setup","text":""},{"location":"samples/mcp-integration-with-kb/#prerequisites","title":"Prerequisites","text":"<ul> <li>The uv package manager</li> <li>AWS Account with Bedrock access and proper IAM permissions - Getting Started with Amazon Bedrock</li> <li>A Bedrock Knowledge Base</li> <li>For a quick reference Knowledge Base setup, check out the e2e RAG solution via CDK repo. This will set you up with everything you need - IAM roles, vector storage (either OpenSearch Serverless or Aurora PostgreSQL), and a fully configured Knowledge Base with sample data. The Knowledge Base is the only component you'll really need for this implementation.</li> </ul> <p>Note: Reranking for Amazon Bedrock is not supported in us-east-1. For more information about supported regions and models for reranking, see Supported Regions and models for reranking in Amazon Bedrock.</p>"},{"location":"samples/mcp-integration-with-kb/#installation","title":"Installation","text":"<ol> <li>Clone the repository.</li> </ol> <pre><code>git clone https://github.com/awslabs/mcp.git\n</code></pre> <ol> <li>Navigate to the sample directory and copy the .env.example file to .env and add your AWS credentials.</li> </ol> <pre><code>cd mcp/samples/mcp-integration-with-kb\ncp .env.example .env\n</code></pre> <ol> <li>Open two different terminals and install the dependencies in each.</li> </ol> <pre><code>uv sync\n</code></pre> <p>then activate the virtual environment</p> <pre><code>source .venv/bin/activate\n</code></pre> <ol> <li>In one of the terminals, run the FastAPI server</li> </ol> <pre><code>uvicorn clients.client_server:app --reload\n</code></pre> <ol> <li>In the other terminal, run the Streamlit app</li> </ol> <pre><code>streamlit run user_interfaces/chat_bedrock_st.py\n</code></pre> <ol> <li>The chatbot should now be running on http://localhost:8501/</li> </ol>"},{"location":"samples/mcp-integration-with-kb/#usage","title":"Usage","text":"<p>Grab your Bedrock Knowledge Base ID from the Bedrock Knowledge Base console and add it to the UI first on the left hand side menu.</p> <p>Ask away!</p>"},{"location":"samples/mcp-integration-with-kb/#troubleshooting","title":"Troubleshooting","text":"<p>Logs are available in the terminal where you ran the FastAPI server, outlining various steps and actions taken by the server.</p> <p>If you see an error about <code>boto3</code> or <code>streamlit</code> not being found, it is likely because you did not activate the virtual environment:</p> <pre><code>uv sync\nsource .venv/bin/activate\n</code></pre>"},{"location":"servers/aws-diagram-mcp-server/","title":"AWS Diagram MCP Server","text":"<p>Model Context Protocol (MCP) server for AWS Diagrams</p> <p>This MCP server that seamlessly creates diagrams using the Python diagrams package DSL. This server allows you to generate AWS diagrams, sequence diagrams, flow diagrams, and class diagrams using Python code.</p> <p></p>"},{"location":"servers/aws-diagram-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Install GraphViz https://www.graphviz.org/</li> </ol>"},{"location":"servers/aws-diagram-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.aws-diagram-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.aws-diagram-mcp-server\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"autoApprove\": [],\n      \"disabled\": false\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/aws-diagram-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.aws-diagram-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/aws-diagram-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/aws-diagram-mcp-server/#features","title":"Features","text":"<p>The Diagrams MCP Server provides the following capabilities:</p> <ol> <li>Generate Diagrams: Create professional diagrams using Python code</li> <li>Multiple Diagram Types: Support for AWS architecture, sequence diagrams, flow charts, class diagrams, and more</li> <li>Customization: Customize diagram appearance, layout, and styling</li> <li>Security: Code scanning to ensure secure diagram generation</li> </ol>"},{"location":"servers/aws-diagram-mcp-server/#quick-example","title":"Quick Example","text":"<pre><code>from diagrams import Diagram\nfrom diagrams.aws.compute import Lambda\nfrom diagrams.aws.database import Dynamodb\nfrom diagrams.aws.network import APIGateway\n\nwith Diagram(\"Serverless Application\", show=False):\n    api = APIGateway(\"API Gateway\")\n    function = Lambda(\"Function\")\n    database = Dynamodb(\"DynamoDB\")\n\n    api &gt;&gt; function &gt;&gt; database\n</code></pre>"},{"location":"servers/aws-diagram-mcp-server/#development","title":"Development","text":""},{"location":"servers/aws-diagram-mcp-server/#testing","title":"Testing","text":"<p>The project includes a comprehensive test suite to ensure the functionality of the MCP server. The tests are organized by module and cover all aspects of the server's functionality.</p> <p>To run the tests, use the provided script:</p> <pre><code>./run_tests.sh\n</code></pre> <p>This script will automatically install pytest and its dependencies if they're not already installed.</p> <p>Or run pytest directly (if you have pytest installed):</p> <pre><code>pytest -xvs tests/\n</code></pre> <p>To run with coverage:</p> <pre><code>pytest --cov=awslabs.aws_diagram_mcp_server --cov-report=term-missing tests/\n</code></pre> <p>For more information about the tests, see the tests README.</p>"},{"location":"servers/aws-diagram-mcp-server/#development-dependencies","title":"Development Dependencies","text":"<p>To set up the development environment, install the development dependencies:</p> <pre><code>uv pip install -e \".[dev]\"\n</code></pre> <p>This will install the required dependencies for development, including pytest, pytest-asyncio, and pytest-cov.</p>"},{"location":"servers/aws-documentation-mcp-server/","title":"AWS Documentation MCP Server","text":"<p>Model Context Protocol (MCP) server for AWS Documentation</p> <p>This MCP server provides tools to access AWS documentation, search for content, and get recommendations.</p>"},{"location":"servers/aws-documentation-mcp-server/#features","title":"Features","text":"<ul> <li>Read Documentation: Fetch and convert AWS documentation pages to markdown format</li> <li>Search Documentation: Search AWS documentation using the official search API</li> <li>Recommendations: Get content recommendations for AWS documentation pages</li> </ul>"},{"location":"servers/aws-documentation-mcp-server/#prerequisites","title":"Prerequisites","text":""},{"location":"servers/aws-documentation-mcp-server/#installation-requirements","title":"Installation Requirements","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python 3.10 or newer using <code>uv python install 3.10</code> (or a more recent version)</li> </ol>"},{"location":"servers/aws-documentation-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, ~/.aws/amazonq/mcp.json):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.aws-documentation-mcp-server\": {\n        \"command\": \"uvx\",\n        \"args\": [\"awslabs.aws-documentation-mcp-server@latest\"],\n        \"env\": {\n          \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n        },\n        \"disabled\": false,\n        \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/aws-documentation-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.aws-documentation-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/aws-documentation-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/aws-documentation-mcp-server/#basic-usage","title":"Basic Usage","text":"<p>Example:  - \"look up documentation on S3 bucket naming rule. cite your sources\"  - \"recommend content for page https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html\"</p> <p></p>"},{"location":"servers/aws-documentation-mcp-server/#tools","title":"Tools","text":""},{"location":"servers/aws-documentation-mcp-server/#read_documentation","title":"read_documentation","text":"<p>Fetches an AWS documentation page and converts it to markdown format.</p> <pre><code>read_documentation(url: str) -&gt; str\n</code></pre>"},{"location":"servers/aws-documentation-mcp-server/#search_documentation","title":"search_documentation","text":"<p>Searches AWS documentation using the official AWS Documentation Search API.</p> <pre><code>search_documentation(search_phrase: str, limit: int) -&gt; list[dict]\n</code></pre>"},{"location":"servers/aws-documentation-mcp-server/#recommend","title":"recommend","text":"<p>Gets content recommendations for an AWS documentation page.</p> <pre><code>recommend(url: str) -&gt; list[dict]\n</code></pre>"},{"location":"servers/aws-location-mcp-server/","title":"AWS Location Service MCP Server","text":"<p>Model Context Protocol (MCP) server for AWS Location Service</p> <p>This MCP server provides tools to access AWS Location Service capabilities, focusing on place search, geographical coordinates, and route planning.</p>"},{"location":"servers/aws-location-mcp-server/#features","title":"Features","text":"<ul> <li>Search for Places: Search for places using geocoding</li> <li>Get Place Details: Get details for specific places by PlaceId</li> <li>Reverse Geocode: Convert coordinates to addresses</li> <li>Search Nearby: Search for places near a specified location</li> <li>Open Now Search: Search for places that are currently open</li> <li>Route Calculation: Calculate routes between locations with turn-by-turn directions</li> <li>Waypoint Optimization: Optimize the order of waypoints for efficient routing</li> </ul>"},{"location":"servers/aws-location-mcp-server/#prerequisites","title":"Prerequisites","text":""},{"location":"servers/aws-location-mcp-server/#requirements","title":"Requirements","text":"<ol> <li>Have an AWS account with AWS Location Service enabled</li> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python 3.10 or newer using <code>uv python install 3.10</code> (or a more recent version)</li> </ol>"},{"location":"servers/aws-location-mcp-server/#installation","title":"Installation","text":"<p>Here are the ways you can work with the AWS Location MCP server:</p>"},{"location":"servers/aws-location-mcp-server/#configuration","title":"Configuration","text":"<p>Configure the server in your MCP configuration file. Here are some ways you can work with MCP across AWS, and we'll be adding support to more products soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.aws-location-mcp-server\": {\n        \"command\": \"uvx\",\n        \"args\": [\"awslabs.aws-location-mcp-server@latest\"],\n        \"env\": {\n          \"AWS_PROFILE\": \"your-aws-profile\",\n          \"AWS_REGION\": \"us-east-1\",\n          \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n        },\n        \"disabled\": false,\n        \"autoApprove\": []\n    }\n  }\n}\n</code></pre>"},{"location":"servers/aws-location-mcp-server/#docker-configuration","title":"Docker Configuration","text":"<p>After building with <code>docker build -t awslabs/aws-location-mcp-server .</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.aws-location-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"-i\",\n          \"awslabs/aws-location-mcp-server\"\n        ],\n        \"env\": {\n          \"AWS_PROFILE\": \"your-aws-profile\",\n          \"AWS_REGION\": \"us-east-1\"\n        },\n        \"disabled\": false,\n        \"autoApprove\": []\n    }\n  }\n}\n</code></pre>"},{"location":"servers/aws-location-mcp-server/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>AWS_PROFILE</code>: AWS CLI profile to use for credentials</li> <li><code>AWS_REGION</code>: AWS region to use (default: us-east-1)</li> <li><code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code>: Explicit AWS credentials (alternative to AWS_PROFILE)</li> <li><code>FASTMCP_LOG_LEVEL</code>: Logging level (ERROR, WARNING, INFO, DEBUG)</li> </ul>"},{"location":"servers/aws-location-mcp-server/#tools","title":"Tools","text":"<p>The server exposes the following tools through the MCP interface:</p>"},{"location":"servers/aws-location-mcp-server/#search_places","title":"search_places","text":"<p>Search for places using AWS Location Service geocoding capabilities.</p> <pre><code>search_places(query: str, max_results: int = 5, mode: str = 'summary') -&gt; dict\n</code></pre>"},{"location":"servers/aws-location-mcp-server/#get_place","title":"get_place","text":"<p>Get details for a specific place using its unique place ID.</p> <pre><code>get_place(place_id: str, mode: str = 'summary') -&gt; dict\n</code></pre>"},{"location":"servers/aws-location-mcp-server/#reverse_geocode","title":"reverse_geocode","text":"<p>Convert coordinates to an address using reverse geocoding.</p> <pre><code>reverse_geocode(longitude: float, latitude: float) -&gt; dict\n</code></pre>"},{"location":"servers/aws-location-mcp-server/#search_nearby","title":"search_nearby","text":"<p>Search for places near a specific location with optional radius expansion.</p> <pre><code>search_nearby(longitude: float, latitude: float, radius: int = 500, max_results: int = 5,\n              query: str = None, max_radius: int = 10000, expansion_factor: float = 2.0,\n              mode: str = 'summary') -&gt; dict\n</code></pre>"},{"location":"servers/aws-location-mcp-server/#search_places_open_now","title":"search_places_open_now","text":"<p>Search for places that are currently open, with radius expansion if needed.</p> <pre><code>search_places_open_now(query: str, max_results: int = 5, initial_radius: int = 500,\n                       max_radius: int = 50000, expansion_factor: float = 2.0) -&gt; dict\n</code></pre>"},{"location":"servers/aws-location-mcp-server/#calculate_route","title":"calculate_route","text":"<p>Calculate a route between two locations with turn-by-turn directions.</p> <pre><code>calculate_route(\n    departure_position: list,  # [longitude, latitude]\n    destination_position: list,  # [longitude, latitude]\n    travel_mode: str = 'Car',  # 'Car', 'Truck', 'Walking', or 'Bicycle'\n    optimize_for: str = 'FastestRoute'  # 'FastestRoute' or 'ShortestRoute'\n) -&gt; dict\n</code></pre> <p>Returns: - <code>distance_meters</code>: Total route distance in meters - <code>duration_seconds</code>: Estimated travel time in seconds - <code>legs</code>: List of route legs with distance and duration - <code>turn_by_turn</code>: List of navigation instructions with:   - <code>distance_meters</code>: Distance for this step   - <code>duration_seconds</code>: Duration for this step   - <code>type</code>: Maneuver type (e.g., 'Straight', 'Turn')   - <code>road_name</code>: Name of the road for this step</p> <p>Example usage: <pre><code>route = await calculate_route(\n    ctx,\n    departure_position=[-122.335167, 47.608013],  # Seattle\n    destination_position=[-122.200676, 47.610149],  # Bellevue\n    travel_mode='Car',\n    optimize_for='FastestRoute'\n)\n</code></pre></p>"},{"location":"servers/aws-location-mcp-server/#optimize_waypoints","title":"optimize_waypoints","text":"<p>Optimize the order of waypoints for efficient routing.</p> <pre><code>optimize_waypoints(\n    origin_position: list,  # [longitude, latitude]\n    destination_position: list,  # [longitude, latitude]\n    waypoints: list,  # List of waypoints, each as a dict with 'Id' and 'Position' [longitude, latitude]\n    travel_mode: str = 'Car',\n    mode: str = 'summary'\n) -&gt; dict\n</code></pre> <p>Returns: - <code>optimized_order</code>: List of waypoint IDs in optimized order - <code>total_distance_meters</code>: Total route distance in meters - <code>total_duration_seconds</code>: Total estimated travel time in seconds - <code>waypoints</code>: List of waypoints with arrival and departure times</p> <p>Example usage: <pre><code>result = await optimize_waypoints(\n    ctx,\n    origin_position=[-122.335167, 47.608013],  # Seattle\n    destination_position=[-122.121513, 47.673988],  # Redmond\n    waypoints=[\n        {'Id': 'bellevue', 'Position': [-122.200676, 47.610149]},\n        {'Id': 'kirkland', 'Position': [-122.209032, 47.676607]}\n    ],\n    travel_mode='Car'\n)\n</code></pre></p>"},{"location":"servers/aws-location-mcp-server/#get_coordinates","title":"get_coordinates","text":"<p>Get coordinates for a location name or address.</p> <pre><code>get_coordinates(location: str) -&gt; dict\n</code></pre>"},{"location":"servers/aws-location-mcp-server/#aws-location-service-resources","title":"AWS Location Service Resources","text":"<p>This server uses the AWS Location Service APIs for: - Geocoding (converting addresses to coordinates) - Reverse geocoding (converting coordinates to addresses) - Place search (finding places by name, category, etc.) - Place details (getting information about specific places) - Route calculation (finding routes between locations with turn-by-turn directions) - Waypoint optimization (determining the most efficient order to visit multiple locations)</p>"},{"location":"servers/aws-location-mcp-server/#security-considerations","title":"Security Considerations","text":"<ul> <li>Use AWS profiles for credential management</li> <li>Use IAM policies to restrict access to only the required AWS Location Service resources</li> <li>Consider using temporary credentials or AWS IAM roles for enhanced security</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/","title":"Amazon Bedrock Knowledge Base Retrieval MCP Server","text":"<p>MCP server for accessing Amazon Bedrock Knowledge Bases</p>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#features","title":"Features","text":""},{"location":"servers/bedrock-kb-retrieval-mcp-server/#discover-knowledge-bases-and-their-data-sources","title":"Discover knowledge bases and their data sources","text":"<ul> <li>Find and explore all available knowledge bases</li> <li>Search for knowledge bases by name or tag</li> <li>List data sources associated with each knowledge base</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#query-knowledge-bases-with-natural-language","title":"Query knowledge bases with natural language","text":"<ul> <li>Retrieve information using conversational queries</li> <li>Get relevant passages from your knowledge bases</li> <li>Access citation information for all results</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#filter-results-by-data-source","title":"Filter results by data source","text":"<ul> <li>Focus your queries on specific data sources</li> <li>Include or exclude specific data sources</li> <li>Prioritize results from specific data sources</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#rerank-results","title":"Rerank results","text":"<ul> <li>Improve relevance of retrieval results</li> <li>Use Amazon Bedrock reranking capabilities</li> <li>Sort results by relevance to your query</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#prerequisites","title":"Prerequisites","text":""},{"location":"servers/bedrock-kb-retrieval-mcp-server/#installation-requirements","title":"Installation Requirements","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> </ol>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#aws-requirements","title":"AWS Requirements","text":"<ol> <li>AWS CLI Configuration: You must have the AWS CLI configured with credentials and an AWS_PROFILE that has access to Amazon Bedrock and Knowledge Bases</li> <li>Amazon Bedrock Knowledge Base: You must have at least one Amazon Bedrock Knowledge Base with the tag key <code>mcp-multirag-kb</code> with a value of <code>true</code></li> <li>IAM Permissions: Your IAM role/user must have appropriate permissions to:</li> <li>List and describe knowledge bases</li> <li>Access data sources</li> <li>Query knowledge bases</li> </ol>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#reranking-requirements","title":"Reranking Requirements","text":"<p>If you intend to use reranking functionality, your Bedrock Knowledge Base needs additional permissions:</p> <ol> <li>Your IAM role must have permissions for both <code>bedrock:Rerank</code> and <code>bedrock:InvokeModel</code> actions</li> <li>The Amazon Bedrock Knowledge Bases service role must also have these permissions</li> <li>Reranking is only available in specific regions. Please refer to the official documentation for an up to date list of supported regions.</li> <li>Enable model access for the available reranking models in the specified region.</li> </ol>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#controlling-reranking","title":"Controlling Reranking","text":"<p>Reranking can be globally enabled or disabled using the <code>BEDROCK_KB_RERANKING_ENABLED</code> environment variable:</p> <ul> <li>Set to <code>false</code> (default): Disables reranking for all queries unless explicitly enabled</li> <li>Set to <code>true</code>: Enables reranking for all queries unless explicitly disabled</li> </ul> <p>The environment variable accepts various formats:</p> <ul> <li>For enabling: 'true', '1', 'yes', or 'on' (case-insensitive)</li> <li>For disabling: any other value or not set (default behavior)</li> </ul> <p>This setting provides a global default, while individual API calls can still override it by explicitly setting the <code>reranking</code> parameter.</p> <p>For detailed instructions on setting up knowledge bases, see:</p> <ul> <li>Create a knowledge base</li> <li>Managing permissions for Amazon Bedrock knowledge bases</li> <li>Permissions for reranking in Amazon Bedrock</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.bedrock-kb-retrieval-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.bedrock-kb-retrieval-mcp-server@latest\"],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-profile-name\",\n        \"AWS_REGION\": \"us-east-1\",\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"KB_INCLUSION_TAG_KEY\": \"optional-tag-key-to-filter-kbs\",\n        \"BEDROCK_KB_RERANKING_ENABLED\": \"false\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/bedrock-kb-retrieval-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.bedrock-kb-retrieval-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"--env\",\n          \"KB_INCLUSION_TAG_KEY=optional-tag-key-to-filter-kbs\",\n          \"--env\",\n          \"BEDROCK_KB_RERANKING_ENABLED=false\",\n          \"--env\",\n          \"AWS_REGION=us-east-1\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/bedrock-kb-retrieval-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#limitations","title":"Limitations","text":"<ul> <li>Results with <code>IMAGE</code> content type are not included in the KB query response.</li> <li>The <code>reranking</code> parameter requires additional permissions, Amazon Bedrock model access, and is only available in specific regions.</li> </ul>"},{"location":"servers/cdk-mcp-server/","title":"AWS CDK MCP Server","text":"<p>MCP server for AWS Cloud Development Kit (CDK) best practices, infrastructure as code patterns, and security compliance with CDK Nag.</p>"},{"location":"servers/cdk-mcp-server/#features","title":"Features","text":""},{"location":"servers/cdk-mcp-server/#cdk-general-guidance","title":"CDK General Guidance","text":"<ul> <li>Prescriptive patterns with AWS Solutions Constructs and GenAI CDK libraries</li> <li>Structured decision flow for choosing appropriate implementation approaches</li> <li>Security automation through CDK Nag integration and Lambda Powertools</li> </ul>"},{"location":"servers/cdk-mcp-server/#cdk-nag-integration","title":"CDK Nag Integration","text":"<ul> <li>Work with CDK Nag rules for security and compliance</li> <li>Explain specific CDK Nag rules with AWS Well-Architected guidance</li> <li>Check if CDK code contains Nag suppressions that require human review</li> </ul>"},{"location":"servers/cdk-mcp-server/#aws-solutions-constructs","title":"AWS Solutions Constructs","text":"<ul> <li>Search and discover AWS Solutions Constructs patterns</li> <li>Find recommended patterns for common architecture needs</li> <li>Get detailed documentation on Solutions Constructs</li> </ul>"},{"location":"servers/cdk-mcp-server/#generative-ai-cdk-constructs","title":"Generative AI CDK Constructs","text":"<ul> <li>Search for GenAI CDK constructs by name or type</li> <li>Discover specialized constructs for AI/ML workloads</li> <li>Get implementation guidance for generative AI applications</li> </ul>"},{"location":"servers/cdk-mcp-server/#lambda-layer-documentation-provider","title":"Lambda Layer Documentation Provider","text":"<ul> <li>Access comprehensive documentation for AWS Lambda layers</li> <li>Get code examples for generic Lambda layers and Python-specific layers</li> <li>Retrieve directory structure information and implementation best practices</li> <li>Seamless integration with AWS Documentation MCP Server for detailed documentation</li> </ul>"},{"location":"servers/cdk-mcp-server/#amazon-bedrock-agent-schema-generation","title":"Amazon Bedrock Agent Schema Generation","text":"<ul> <li>Use this tool when creating Bedrock Agents with Action Groups that use Lambda functions</li> <li>Streamline the creation of Bedrock Agent schemas</li> <li>Convert code files to compatible OpenAPI specifications</li> </ul>"},{"location":"servers/cdk-mcp-server/#developer-notes","title":"Developer Notes","text":"<ul> <li>Requirements: Your Lambda function must use <code>BedrockAgentResolver</code> from AWS Lambda Powertools</li> <li>Lambda Dependencies: If schema generation fails, a fallback script will be generated. If you see error messages about missing dependencies, install them and then run the script again.</li> <li>Integration: Use the generated schema with <code>bedrock.ApiSchema.fromLocalAsset()</code> in your CDK code</li> </ul>"},{"location":"servers/cdk-mcp-server/#cdk-implementation-workflow","title":"CDK Implementation Workflow","text":"<p>This diagram provides a comprehensive view of the recommended CDK implementation workflow:</p> <pre><code>graph TD\n    Start([Start]) --&gt; A[\"CDKGeneralGuidance\"]\n    A --&gt; Init[\"cdk init app\"]\n\n    Init --&gt; B{Choose Approach}\n    B --&gt;|\"Common Patterns\"| C1[\"GetAwsSolutionsConstructPattern\"]\n    B --&gt;|\"GenAI Features\"| C2[\"SearchGenAICDKConstructs\"]\n    B --&gt;|\"Custom Needs\"| C3[\"Custom CDK Code\"]\n\n    C1 --&gt; D1[\"Implement Solutions Construct\"]\n    C2 --&gt; D2[\"Implement GenAI Constructs\"]\n    C3 --&gt; D3[\"Implement Custom Resources\"]\n\n    %% Bedrock Agent with Action Groups specific flow\n    D2 --&gt;|\"For Bedrock Agents&lt;br/&gt;with Action Groups\"| BA[\"Create Lambda with&lt;br/&gt;BedrockAgentResolver\"]\n\n    %% Schema generation flow\n    BA --&gt; BS[\"GenerateBedrockAgentSchema\"]\n    BS --&gt;|\"Success\"| JSON[\"openapi.json created\"]\n    BS --&gt;|\"Import Errors\"| BSF[\"Tool generates&lt;br/&gt;generate_schema.py\"]\n    BSF --&gt;|\"Missing dependencies?\"| InstallDeps[\"Install dependencies\"]\n    InstallDeps --&gt; BSR[\"Run script manually:&lt;br/&gt;python generate_schema.py\"]\n    BSR --&gt; JSON[\"openapi.json created\"]\n\n    %% Use schema in Agent CDK\n    JSON --&gt; AgentCDK[\"Use schema in&lt;br/&gt;Agent CDK code\"]\n    AgentCDK --&gt; D2\n\n    %% Conditional Lambda Powertools implementation\n    D1 &amp; D2 &amp; D3 --&gt; HasLambda{\"Using Lambda&lt;br/&gt;Functions?\"}\n    HasLambda --&gt; UseLayer{\"Using Lambda&lt;br/&gt;Layers?\"}\n    UseLayer --&gt;|\"Yes\"| LLDP[\"LambdaLayerDocumentationProvider\"]\n\n    HasLambda --&gt;|\"No\"| SkipL[\"Skip\"]\n\n    %% Rest of workflow\n    LLDP[\"LambdaLayerDocumentationProvider\"] --&gt; Synth[\"cdk synth\"]\n    SkipL --&gt; Synth\n\n    Synth --&gt; Nag{\"CDK Nag&lt;br/&gt;warnings?\"}\n    Nag --&gt;|Yes| E[\"ExplainCDKNagRule\"]\n    Nag --&gt;|No| Deploy[\"cdk deploy\"]\n\n    E --&gt; Fix[\"Fix or Add Suppressions\"]\n    Fix --&gt; CN[\"CheckCDKNagSuppressions\"]\n    CN --&gt; Synth\n\n    %% Styling with darker colors\n    classDef default fill:#424242,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef cmd fill:#4a148c,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef tool fill:#01579b,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef note fill:#1b5e20,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef output fill:#006064,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef decision fill:#5d4037,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n\n    class Init,Synth,Deploy,BSR cmd;\n    class A,C1,C2,BS,E,CN,LLDP tool;\n    class JSON output;\n    class HasLambda,UseLayer,Nag decision;</code></pre>"},{"location":"servers/cdk-mcp-server/#available-mcp-tools","title":"Available MCP Tools","text":"<ul> <li>CDKGeneralGuidance: Get prescriptive advice for building AWS applications with CDK</li> <li>GetAwsSolutionsConstructPattern: Find vetted architecture patterns combining AWS services</li> <li>SearchGenAICDKConstructs: Discover GenAI CDK constructs by name or features</li> <li>GenerateBedrockAgentSchema: Create OpenAPI schemas for Bedrock Agent action groups</li> <li>LambdaLayerDocumentationProvider: Access documentation for Lambda layers implementation</li> <li>ExplainCDKNagRule: Get detailed guidance on CDK Nag security rules</li> <li>CheckCDKNagSuppressions: Validate CDK Nag suppressions in your code</li> </ul>"},{"location":"servers/cdk-mcp-server/#available-mcp-resources","title":"Available MCP Resources","text":"<ul> <li>CDK Nag Rules: Access rule packs via <code>cdk-nag://rules/{rule_pack}</code></li> <li>AWS Solutions Constructs: Access patterns via <code>aws-solutions-constructs://{pattern_name}</code></li> <li>GenAI CDK Constructs: Access documentation via <code>genai-cdk-constructs://{construct_type}/{construct_name}</code></li> <li>Lambda Powertools: Get guidance on Lambda Powertools via <code>lambda-powertools://{topic}</code></li> </ul>"},{"location":"servers/cdk-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Install AWS CDK CLI using <code>npm install -g aws-cdk</code> (Note: The MCP server itself doesn't use the CDK CLI directly, but it guides users through CDK application development that requires the CLI)</li> </ol>"},{"location":"servers/cdk-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.cdk-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.cdk-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/cdk-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.cdk-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/cdk-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/cdk-mcp-server/#security-considerations","title":"Security Considerations","text":"<p>When using this MCP server, you should consider:</p> <ul> <li>Reviewing all CDK Nag warnings and errors manually</li> <li>Fixing security issues rather than suppressing them whenever possible</li> <li>Documenting clear justifications for any necessary suppressions</li> <li>Using the CheckCDKNagSuppressions tool to verify no unauthorized suppressions exist</li> </ul> <p>Before applying CDK NAG Suppressions, you should consider conducting your own independent assessment to ensure that your use would comply with your own specific security and quality control practices and standards, as well as the local laws, rules, and regulations that govern you and your content.</p>"},{"location":"servers/cfn-mcp-server/","title":"CloudFormation MCP Server","text":"<p>Model Context Protocol (MCP) server that enables LLMs to directly create and manage over 1,100 AWS resources through natural language using AWS Cloud Control API with Infrastructure as Code best practices.</p>"},{"location":"servers/cfn-mcp-server/#features","title":"Features","text":"<ul> <li>Resource Creation: Uses a declarative approach to create any of 1,100+ AWS resources through Cloud Control API</li> <li>Resource Reading: Reads all properties and attributes of specific AWS resources</li> <li>Resource Updates: Uses a declarative approach to apply changes to existing AWS resources</li> <li>Resource Deletion: Safely removes AWS resources with proper validation</li> <li>Resource Listing: Enumerates all resources of a specified type across your AWS environment</li> <li>Schema Information: Returns detailed CloudFormation schema for any resource to enable more effective operations</li> <li>Natural Language Interface: Transform infrastructure-as-code from static authoring to dynamic conversations</li> <li>Partner Resource Support: Works with both AWS-native and partner-defined resources</li> </ul>"},{"location":"servers/cfn-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Configure AWS credentials:</li> <li>Via AWS CLI: <code>aws configure</code></li> <li>Or set environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)</li> <li>Ensure your IAM role or user has the necessary permissions (see Security Considerations)</li> </ol>"},{"location":"servers/cfn-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.cfn-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"awslabs.aws-cfn-mcp-server@latest\",\n        \"--readonly\" // Optional paramter if you would like to restrict the MCP to only read actions\n      ],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-named-profile\",\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/cfn-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.cfn-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/cfn-mcp-server:latest\",\n          \"--readonly\" // Optional paramter if you would like to restrict the MCP to only read actions\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p>"},{"location":"servers/cfn-mcp-server/#tools","title":"Tools","text":""},{"location":"servers/cfn-mcp-server/#create_resource","title":"create_resource","text":"<p>Creates an AWS resource using the AWS Cloud Control API with a declarative approach. Example: Create an S3 bucket with versioning and encryption enabled.</p>"},{"location":"servers/cfn-mcp-server/#get_resource","title":"get_resource","text":"<p>Gets details of a specific AWS resource using the AWS Cloud Control API. Example: Get the configuration of an EC2 instance.</p>"},{"location":"servers/cfn-mcp-server/#update_resource","title":"update_resource","text":"<p>Updates an AWS resource using the AWS Cloud Control API with a declarative approach. Example: Update an RDS instance's storage capacity.</p>"},{"location":"servers/cfn-mcp-server/#delete_resource","title":"delete_resource","text":"<p>Deletes an AWS resource using the AWS Cloud Control API. Example: Remove an unused NAT gateway.</p>"},{"location":"servers/cfn-mcp-server/#list_resources","title":"list_resources","text":"<p>Lists AWS resources of a specified type using AWS Cloud Control API. Example: List all EC2 instances in a region.</p>"},{"location":"servers/cfn-mcp-server/#get_resource_schema_information","title":"get_resource_schema_information","text":"<p>Get schema information for an AWS CloudFormation resource. Example: Get the schema for AWS::S3::Bucket to understand all available properties.</p>"},{"location":"servers/cfn-mcp-server/#get_request_status","title":"get_request_status","text":"<p>Get the status of a mutation that was initiated by create/update/delete resource Example: Give me the status of the last request I made</p>"},{"location":"servers/cfn-mcp-server/#basic-usage","title":"Basic Usage","text":"<p>Examples of how to use the AWS Infrastructure as Code MCP Server:</p> <ul> <li>\"Create a new S3 bucket with versioning and encryption enabled\"</li> <li>\"List all EC2 instances in the production environment\"</li> <li>\"Update the RDS instance to increase storage to 500GB\"</li> <li>\"Delete unused NAT gateways in VPC-123\"</li> <li>\"Set up a three-tier architecture with web, app, and database layers\"</li> <li>\"Create a disaster recovery environment in us-east-1\"</li> <li>\"Configure CloudWatch alarms for all production resources\"</li> <li>\"Implement cross-region replication for critical S3 buckets\"</li> <li>\"Show me the schema for AWS::Lambda::Function\"</li> </ul>"},{"location":"servers/cfn-mcp-server/#resource-type-support","title":"Resource Type support","text":"<p>Resources which are supported by this MCP and the supported operations can be found here: https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/supported-resources.html</p>"},{"location":"servers/cfn-mcp-server/#security-considerations","title":"Security Considerations","text":"<p>When using this MCP server, you should consider:</p> <ul> <li>Ensuring proper IAM permissions are configured before use</li> <li>Use AWS CloudTrail for additional security monitoring</li> <li>Configure resource-specific permissions when possible instead of wildcard permissions</li> <li>Consider using resource tagging for better governance and cost management</li> <li>Review all changes made by the MCP server as part of your regular security reviews</li> <li>If you would like to restrict the MCP to readonly operations, specify --readonly True in the startup arguments for the MCP</li> </ul>"},{"location":"servers/cfn-mcp-server/#required-iam-permissions","title":"Required IAM Permissions","text":"<p>Ensure your AWS credentials have the following minimum permissions:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudcontrol:ListResources\",\n                \"cloudcontrol:GetResource\",\n                \"cloudcontrol:CreateResource\",\n                \"cloudcontrol:DeleteResource\",\n                \"cloudcontrol:UpdateResource\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre>"},{"location":"servers/cfn-mcp-server/#limitations","title":"Limitations","text":"<ul> <li>Operations are limited to resources supported by AWS Cloud Control API</li> <li>Performance depends on the underlying AWS services' response times</li> <li>Some complex resource relationships may require multiple operations</li> <li>This MCP server can only manage resources in the AWS regions where Cloud Control API is available</li> <li>Resource modification operations may be limited by service-specific constraints</li> <li>Rate limiting may affect operations when managing many resources simultaneously</li> <li>Some resource types might not support all operations (create, read, update, delete)</li> </ul>"},{"location":"servers/code-doc-gen-mcp-server/","title":"AWS Labs Code Documentation Generation MCP Server","text":"<p>A Model Context Protocol (MCP) server that automatically analyzes repository structure and generates comprehensive documentation for code projects. This server uses repomix to extract project structure and creates tailored documentation based on project type.</p>"},{"location":"servers/code-doc-gen-mcp-server/#architecture","title":"Architecture","text":""},{"location":"servers/code-doc-gen-mcp-server/#how-the-server-works","title":"How the Server Works","text":"<p>The code-doc-gen-mcp-server follows this workflow:</p> <ol> <li>prepare_repository:</li> <li>Uses RepomixManager to analyze a project directory</li> <li>Runs <code>repomix</code> to generate an XML representation of the repo</li> <li>Extracts directory structure from this XML</li> <li> <p>Returns a ProjectAnalysis with the directory structure</p> </li> <li> <p>create_context:</p> </li> <li> <p>Creates a DocumentationContext with the ProjectAnalysis</p> </li> <li> <p>plan_documentation:</p> </li> <li>Uses the directory structure from DocumentationContext</li> <li> <p>Creates a DocumentationPlan with document structure and sections</p> </li> <li> <p>generate_documentation:</p> </li> <li>Generates document templates based on the plan</li> </ol>"},{"location":"servers/code-doc-gen-mcp-server/#key-components","title":"Key Components","text":"<ol> <li>RepomixManager: Manages the execution of repomix and parses its XML output to extract directory structure</li> <li>DocumentationContext: Central state container that tracks project info and documentation progress</li> <li>ProjectAnalysis: Data structure containing analyzed project metadata (languages, dependencies, etc.)</li> <li>DocumentationPlan: Structured plan for document generation with section outlines</li> <li>DocumentGenerator: Creates actual document templates based on the plan</li> </ol>"},{"location":"servers/code-doc-gen-mcp-server/#features","title":"Features","text":"<ul> <li>Project Structure Analysis: Uses repomix to analyze repository structure and extract key components</li> <li>Content Organization: Creates appropriately structured documentation based on project type</li> <li>Multiple Document Types: Supports README, API docs, backend docs, frontend docs, and more</li> <li>Integration with Other MCP Servers: Works with AWS Diagram MCP server</li> <li>Custom Document Templates: Templates for different document types with appropriate sections</li> </ul>"},{"location":"servers/code-doc-gen-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Install <code>repomix</code> using <code>pip install repomix&gt;=0.2.6</code></li> </ol>"},{"location":"servers/code-doc-gen-mcp-server/#installation","title":"Installation","text":"<p>This MCP server can be added to your AWS AI assistants via the appropriate MCP configuration file:</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.code-doc-gen-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.code-doc-gen-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre>"},{"location":"servers/code-doc-gen-mcp-server/#core-concepts","title":"Core Concepts","text":""},{"location":"servers/code-doc-gen-mcp-server/#documentationcontext","title":"DocumentationContext","text":"<p>The <code>DocumentationContext</code> class maintains the state of the documentation process throughout its lifecycle:</p> <ul> <li><code>project_name</code>: Name of the project being documented</li> <li><code>working_dir</code>: Working directory for the project (source code location)</li> <li><code>repomix_path</code>: Path where documentation files will be generated</li> <li><code>status</code>: Current status of the documentation process</li> <li><code>current_step</code>: Current step in the documentation workflow</li> <li><code>analysis_result</code>: Contains the ProjectAnalysis with project metadata</li> </ul>"},{"location":"servers/code-doc-gen-mcp-server/#projectanalysis","title":"ProjectAnalysis","text":"<p>The <code>ProjectAnalysis</code> class contains detailed information about the project:</p> <ul> <li><code>project_type</code>: Type of project (e.g., \"Web Application\", \"CLI Tool\")</li> <li><code>features</code>: Key capabilities and functions of the project</li> <li><code>file_structure</code>: Project organization with directory structure</li> <li><code>dependencies</code>: Project dependencies with versions</li> <li><code>primary_languages</code>: Programming languages used in the project</li> <li><code>apis</code> (optional): API endpoint details</li> <li><code>backend</code> (optional): Backend implementation details</li> <li><code>frontend</code> (optional): Frontend implementation details</li> </ul>"},{"location":"servers/code-doc-gen-mcp-server/#tools","title":"Tools","text":""},{"location":"servers/code-doc-gen-mcp-server/#prepare_repository","title":"prepare_repository","text":"<pre><code>async def prepare_repository(\n    project_root: str = Field(..., description='Path to the code repository'),\n    ctx: Context = None,\n) -&gt; ProjectAnalysis\n</code></pre> <p>This tool: 1. Extracts directory structure from the repository using repomix 2. Returns a ProjectAnalysis template for the MCP client to fill 3. Provides directory structure in file_structure[\"directory_structure\"]</p> <p>The MCP client then: 1. Reviews the directory structure 2. Uses read_file to examine key files 3. Fills out the ProjectAnalysis fields 4. Sets has_infrastructure_as_code=True if CDK/Terraform code is detected</p>"},{"location":"servers/code-doc-gen-mcp-server/#create_context","title":"create_context","text":"<pre><code>async def create_context(\n    project_root: str = Field(..., description='Path to the code repository'),\n    analysis: ProjectAnalysis = Field(..., description='Completed ProjectAnalysis'),\n    ctx: Context = None,\n) -&gt; DocumentationContext\n</code></pre> <p>Creates a DocumentationContext from the completed ProjectAnalysis.</p>"},{"location":"servers/code-doc-gen-mcp-server/#plan_documentation","title":"plan_documentation","text":"<pre><code>async def plan_documentation(\n    doc_context: DocumentationContext,\n    ctx: Context,\n) -&gt; DocumentationPlan\n</code></pre> <p>Creates a documentation plan based on the project analysis, determining what document types are needed and creating appropriate document structures.</p>"},{"location":"servers/code-doc-gen-mcp-server/#generate_documentation","title":"generate_documentation","text":"<pre><code>async def generate_documentation(\n    plan: DocumentationPlan,\n    doc_context: DocumentationContext,\n    ctx: Context,\n) -&gt; List[GeneratedDocument]\n</code></pre> <p>Generates document structures with sections for the MCP client to fill with content.</p>"},{"location":"servers/code-doc-gen-mcp-server/#integration-with-other-mcp-servers","title":"Integration with Other MCP Servers","text":"<p>This MCP server is designed to work with:</p> <ul> <li>AWS Diagram MCP Server: For generating architecture diagrams</li> <li>AWS CDK MCP Server: For documenting CDK infrastructure code</li> </ul>"},{"location":"servers/code-doc-gen-mcp-server/#license","title":"License","text":"<p>This project is licensed under the Apache License, Version 2.0. See the LICENSE file for details.</p>"},{"location":"servers/core-mcp-server/","title":"Core MCP Server","text":"<p>MCP server that provides a starting point for using the following awslabs MCP servers - awslabs.cdk-mcp-server - awslabs.bedrock-kb-retrieval-mcp-server - awslabs.nova-canvas-mcp-server - awslabs.cost-analysis-mcp-server - awslabs.aws-documentation-mcp-server - awslabs.aws-diagram-mcp-server</p>"},{"location":"servers/core-mcp-server/#features","title":"Features","text":""},{"location":"servers/core-mcp-server/#planning-and-orchestration","title":"Planning and orchestration","text":"<ul> <li>Provides tool for prompt understanding and translation to AWS services</li> </ul>"},{"location":"servers/core-mcp-server/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher</li> <li>uv - Fast Python package installer and resolver</li> <li>AWS credentials configured with Bedrock access</li> <li>Node.js (for UVX installation support)</li> </ul>"},{"location":"servers/core-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"awslabs.core-mcp-server@latest\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"autoApprove\": [],\n      \"disabled\": false\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/core-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.core-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/core-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/core-mcp-server/#tools-and-resources","title":"Tools and Resources","text":"<p>The server exposes the following tools through the MCP interface:</p> <ul> <li><code>prompt_understanding</code> - Helps to provide guidance and planning support when building AWS Solutions for the given prompt</li> </ul>"},{"location":"servers/cost-analysis-mcp-server/","title":"Cost Analysis MCP Server","text":"<p>MCP server for generating upfront AWS service cost estimates and providing cost insights</p> <p>Important Note: This server provides estimated pricing based on AWS pricing APIs and web pages. These estimates are for pre-deployment planning purposes and do not reflect the actual expenses of deployed cloud services.</p>"},{"location":"servers/cost-analysis-mcp-server/#features","title":"Features","text":""},{"location":"servers/cost-analysis-mcp-server/#analyze-and-visualize-aws-costs","title":"Analyze and visualize AWS costs","text":"<ul> <li>Get detailed breakdown of your AWS costs by service, region and tier</li> <li>Understand how costs are distributed across various services</li> <li>Provide pre-deployment cost estimates for infrastructure planning</li> <li>Support for analyzing both CDK and Terraform projects to identify AWS services</li> </ul>"},{"location":"servers/cost-analysis-mcp-server/#query-cost-data-with-natural-language","title":"Query cost data with natural language","text":"<ul> <li>Ask questions about your AWS costs in plain English, no complex query languages required</li> <li>Get instant answers fetched from pricing webpage and AWS Pricing API, for questions related to AWS services</li> <li>Retrieve estimated pricing information before actual cloud service deployment</li> </ul>"},{"location":"servers/cost-analysis-mcp-server/#generate-cost-reports-and-insights","title":"Generate cost reports and insights","text":"<ul> <li>Generate comprehensive cost estimates based on your IaC implementation</li> <li>Get cost optimization recommendations for potential cloud infrastructure</li> <li>Provide upfront pricing analysis to support informed decision-making</li> </ul>"},{"location":"servers/cost-analysis-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Set up AWS credentials with access to AWS services</li> <li>You need an AWS account with appropriate permissions</li> <li>Configure AWS credentials with <code>aws configure</code> or environment variables</li> <li>Ensure your IAM role/user has permissions to access AWS Pricing API</li> </ol>"},{"location":"servers/cost-analysis-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.cost-analysis-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.cost-analysis-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"AWS_PROFILE\": \"your-aws-profile\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/cost-analysis-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.cost-analysis-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/cost-analysis-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p>"},{"location":"servers/cost-analysis-mcp-server/#aws-authentication","title":"AWS Authentication","text":"<p>The MCP server uses the AWS profile specified in the <code>AWS_PROFILE</code> environment variable. If not provided, it defaults to the \"default\" profile in your AWS configuration file.</p> <pre><code>\"env\": {\n  \"AWS_PROFILE\": \"your-aws-profile\"\n}\n</code></pre> <p>Make sure the AWS profile has permissions to access the AWS Pricing API. The MCP server creates a boto3 session using the specified profile to authenticate with AWS services. Your AWS IAM credentials remain on your local machine and are strictly used for accessing AWS services.</p>"},{"location":"servers/git-repo-research-mcp-server/","title":"Git Repo Research MCP Server","text":"<p>Model Context Protocol (MCP) server for researching Git repositories using semantic search</p> <p>This MCP server enables developers to research external Git repositories and influence their code generation without having to clone repositories to local projects. It provides tools to index, search, and explore Git repositories using semantic search powered by Amazon Bedrock and FAISS.</p>"},{"location":"servers/git-repo-research-mcp-server/#features","title":"Features","text":"<ul> <li>Repository Indexing: Create searchable FAISS indexes from local or remote Git repositories</li> <li>Semantic Search: Query repository content using natural language and retrieve relevant code snippets</li> <li>Repository Summary: Get directory structures and identify key files like READMEs</li> <li>GitHub Repository Search: Find repositories in AWS-related organizations filtered by licenses and keywords</li> <li>File Access: Access repository files and directories with support for both text and binary content</li> </ul>"},{"location":"servers/git-repo-research-mcp-server/#prerequisites","title":"Prerequisites","text":""},{"location":"servers/git-repo-research-mcp-server/#installation-requirements","title":"Installation Requirements","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python 3.12 or newer using <code>uv python install 3.12</code></li> <li> <ul> <li>uv - Fast Python package installer and resolver</li> </ul> </li> <li>AWS credentials configured with Bedrock access</li> <li>Node.js (for UVX installation support)</li> </ol>"},{"location":"servers/git-repo-research-mcp-server/#aws-requirements","title":"AWS Requirements","text":"<ol> <li>AWS CLI Configuration: You must have the AWS CLI configured with credentials that have access to Amazon Bedrock</li> <li>Amazon Bedrock Access: Ensure your AWS account has access to embedding models like Titan Embeddings</li> <li>Environment Variables: The server uses <code>AWS_REGION</code> and <code>AWS_PROFILE</code> environment variables</li> </ol>"},{"location":"servers/git-repo-research-mcp-server/#optional-requirements","title":"Optional Requirements","text":"<ol> <li>GitHub Token: Set <code>GITHUB_TOKEN</code> environment variable for higher rate limits when searching GitHub repositories</li> </ol>"},{"location":"servers/git-repo-research-mcp-server/#installation","title":"Installation","text":"<p>To add this MCP server to your Amazon Q or Claude, add the following to your MCP config file:</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.git-repo-research-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.git-repo-research-mcp-server@latest\"],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-profile-name\",\n        \"AWS_REGION\": \"us-west-2\",\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"GITHUB_TOKEN\": \"your-github-token\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#tools","title":"Tools","text":""},{"location":"servers/git-repo-research-mcp-server/#create_research_repository","title":"create_research_repository","text":"<p>Indexes a Git repository (local or remote) using FAISS and Amazon Bedrock embeddings.</p> <pre><code>create_research_repository(\n    repository_path: str,\n    output_path: Optional[str] = None,\n    embedding_model: str = \"amazon.titan-embed-text-v2:0\",\n    include_patterns: Optional[List[str]] = None,\n    exclude_patterns: Optional[List[str]] = None,\n    chunk_size: int = 1000,\n    chunk_overlap: int = 200\n) -&gt; Dict\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#search_research_repository","title":"search_research_repository","text":"<p>Performs semantic search within an indexed repository.</p> <pre><code>search_research_repository(\n    index_path: str,\n    query: str,\n    limit: int = 10,\n    threshold: float = 0.0\n) -&gt; Dict\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#search_research_repository_suggestions","title":"search_research_repository_suggestions","text":"<p>Searches for GitHub repositories based on keywords, scoped to AWS organizations.</p> <pre><code>search_research_repository_suggestions(\n    keywords: List[str],\n    num_results: int = 5\n) -&gt; Dict\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#access_file","title":"access_file","text":"<p>Accesses file or directory contents within repositories or on the filesystem.</p> <pre><code>access_file(\n    filepath: str\n) -&gt; Dict | ImageContent\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#delete_research_repository","title":"delete_research_repository","text":"<p>Deletes an indexed repository.</p> <pre><code>delete_research_repository(\n    repository_name_or_path: str,\n    index_directory: Optional[str] = None\n) -&gt; Dict\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#resources","title":"Resources","text":""},{"location":"servers/git-repo-research-mcp-server/#repositoriesrepository_namesummary","title":"repositories://{repository_name}/summary","text":"<p>Get a summary of an indexed repository including structure and helpful files.</p> <pre><code>repositories://awslabs_mcp/summary\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#repositories","title":"repositories://","text":"<p>List all indexed repositories with detailed information.</p> <pre><code>repositories://\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#repositoriesindex_directory","title":"repositories://{index_directory}","text":"<p>List all indexed repositories from a specific index directory.</p> <pre><code>repositories:///path/to/custom/index/directory\n</code></pre>"},{"location":"servers/git-repo-research-mcp-server/#considerations","title":"Considerations","text":"<ul> <li>Repository indexing requires Amazon Bedrock access and sufficient permissions</li> <li>Large repositories may take significant time to index</li> <li>Binary files (except images) are not supported for content viewing</li> <li>GitHub repository search is by default limited to AWS organizations: aws-samples, aws-solutions-library-samples, and awslabs (but can be configured to include other organizations)</li> </ul>"},{"location":"servers/lambda-mcp-server/","title":"AWS Lambda MCP Server","text":"<p>A Model Context Protocol (MCP) server for AWS Lambda to select and run Lambda function as MCP tools without code changes.</p>"},{"location":"servers/lambda-mcp-server/#features","title":"Features","text":"<p>This MCP server acts as a bridge between MCP clients and AWS Lambda functions, allowing generative AI models to access and run Lambda functions as tools. This is useful, for example, to access private resources such as internal applications and databases without the need to provide public network access. This approach allows the model to use other AWS services, private networks, and the public internet.</p> <pre><code>graph LR\n    A[Model] &lt;--&gt; B[MCP Client]\n    B &lt;--&gt; C[\"MCP2Lambda&lt;br&gt;(MCP Server)\"]\n    C &lt;--&gt; D[Lambda Function]\n    D &lt;--&gt; E[Other AWS Services]\n    D &lt;--&gt; F[Internet]\n    D &lt;--&gt; G[VPC]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:4px\n    style D fill:#fbb,stroke:#333,stroke-width:2px\n    style E fill:#fbf,stroke:#333,stroke-width:2px\n    style F fill:#dff,stroke:#333,stroke-width:2px\n    style G fill:#ffd,stroke:#333,stroke-width:2px</code></pre> <p>From a security perspective, this approach implements segregation of duties by allowing the model to invoke the Lambda functions but not to access the other AWS services directly. The client only needs AWS credentials to invoke the Lambda functions. The Lambda functions can then interact with other AWS services (using the function role) and access public or private networks.</p>"},{"location":"servers/lambda-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> </ol>"},{"location":"servers/lambda-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.lambda-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.lambda-mcp-server@latest\"],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-aws-profile\",\n        \"AWS_REGION\": \"us-east-1\",\n        \"FUNCTION_PREFIX\": \"your-function-prefix\",\n        \"FUNCTION_LIST\": \"your-first-function, your-second-function\",\n        \"FUNCTION_TAG_KEY\": \"your-tag-key\",\n        \"FUNCTION_TAG_VALUE\": \"your-tag-value\",\n        \"FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY\": \"your-function-tag-for-input-schema\"\n      }\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/bedrock-kb-retrieval-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.lambda-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"AWS_REGION=us-east-1\",\n          \"--env\",\n          \"FUNCTION_PREFIX=your-function-prefix\",\n          \"--env\",\n          \"FUNCTION_LIST=your-first-function,your-second-function\",\n          \"--env\",\n          \"FUNCTION_TAG_KEY=your-tag-key\",\n          \"--env\",\n          \"FUNCTION_TAG_VALUE=your-tag-value\",\n          \"--env\",\n          \"FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY=your-function-tag-for-input-schema\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/lambda-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p> <p>The <code>AWS_PROFILE</code> and the <code>AWS_REGION</code> are optional, their defualt values are <code>default</code> and <code>us-east-1</code>.</p> <p>You can specify <code>FUNCTION_PREFIX</code>, <code>FUNCTION_LIST</code>, or both. If both are empty, all functions pass the name check. After the name check, if both <code>FUNCTION_TAG_KEY</code> and <code>FUNCTION_TAG_VALUE</code> are set, functions are further filtered by tag (with key=value). If only one of <code>FUNCTION_TAG_KEY</code> and <code>FUNCTION_TAG_VALUE</code>, then no function is selected and a warning is displayed.</p> <p>IMPORTANT: The function name is used as MCP tool name. The function description in AWS Lambda is used as MCP tool description. The function description should clarify when to use the function (what it provides) and how (which parameters). For example, a function that gives access to an internal Customer Relationship Management (CRM) system can use this description: <pre><code>Retrieve customer status on the CRM system based on { 'customerId' } or { 'customerEmail' }\n</code></pre></p> <p>The lambda function parameters can also be provided through the EventBridge Schema Registry, which provides formal JSON Schema. See Schema Support below.</p> <p>Sample functions that can be deployed via AWS SAM are provided in the <code>examples</code> folder.</p>"},{"location":"servers/lambda-mcp-server/#schema-support","title":"Schema Support","text":"<p>The Lambda MCP Server supports input schema through AWS EventBridge Schema Registry. This provides formal JSON Schema documentation for your Lambda function inputs.</p>"},{"location":"servers/lambda-mcp-server/#configuration","title":"Configuration","text":"<p>To use schema validation:</p> <ol> <li>Create your schema in EventBridge Schema Registry</li> <li>Tag your Lambda function with the schema ARN:    <pre><code>Key: FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY (configurable)\nValue: arn:aws:schemas:region:account:schema/registry-name/schema-name\n</code></pre></li> <li>Configure the MCP server with the tag key:    <pre><code>{\n  \"env\": {\n    \"FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY\": \"your-schema-arn-tag-key\"\n  }\n}\n</code></pre></li> </ol> <p>When a Lambda function has a schema tag, the MCP server will: 1. Fetch the schema from EventBridge Schema Registry 2. Add the schema to the tool's documentation</p> <p>This provides better documentation compared to describing parameters in the function description.</p>"},{"location":"servers/lambda-mcp-server/#best-practices","title":"Best practices","text":"<ul> <li>Use the <code>FUNCTION_LIST</code> to specify the functions that are available as MCP tools.</li> <li>Use the <code>FUNCTION_PREFIX</code> to specify the prefix of the functions that are available as MCP tools.</li> <li>Use the <code>FUNCTION_TAG_KEY</code> and <code>FUNCTION_TAG_VALUE</code> to specify the tag key and value of the functions that are available as MCP tools.</li> <li>AWS Lambda <code>Description</code> property: the description of the function is used as MCP tool description, so it should be very detailed to help the model understand when and how to use the function</li> <li>Use EventBridge Schema Registry to provide formal input validation:</li> <li>Create JSON Schema definitions for your function inputs</li> <li>Tag functions with their schema ARNs</li> <li>Configure <code>FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY</code> in the MCP server</li> </ul>"},{"location":"servers/lambda-mcp-server/#security-considerations","title":"Security Considerations","text":"<p>When using this MCP server, you should consider:</p> <ul> <li>Only Lambda functions that are in the provided list or with a name starting with the prefix are imported as MCP tools.</li> <li>The MCP server needs permissions to invoke the Lambda functions.</li> <li>Each Lambda function has its own permissions to optionally access other AWS resources.</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/","title":"Amazon Nova Canvas MCP Server","text":"<p>MCP server for generating images using Amazon Nova Canvas</p>"},{"location":"servers/nova-canvas-mcp-server/#features","title":"Features","text":""},{"location":"servers/nova-canvas-mcp-server/#text-based-image-generation","title":"Text-based image generation","text":"<ul> <li>Create images from text prompts with <code>generate_image</code></li> <li>Customizable dimensions (320-4096px), quality options, and negative prompting</li> <li>Supports multiple image generation (1-5) in single request</li> <li>Adjustable parameters like cfg_scale (1.1-10.0) and seeded generation</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/#color-guided-image-generation","title":"Color-guided image generation","text":"<ul> <li>Generate images with specific color palettes using <code>generate_image_with_colors</code></li> <li>Define up to 10 hex color values to influence the image style and mood</li> <li>Same customization options as text-based generation</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/#workspace-integration","title":"Workspace integration","text":"<ul> <li>Images saved to user-specified workspace directories with automatic folder creation</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/#aws-authentication","title":"AWS authentication","text":"<ul> <li>Uses AWS profiles for secure access to Amazon Nova Canvas services</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Set up AWS credentials with access to Amazon Bedrock and Nova Canvas</li> <li>You need an AWS account with Amazon Bedrock and Amazon Nova Canvas enabled</li> <li>Configure AWS credentials with <code>aws configure</code> or environment variables</li> <li>Ensure your IAM role/user has permissions to use Amazon Bedrock and Nova Canvas</li> </ol>"},{"location":"servers/nova-canvas-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.nova-canvas-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.nova-canvas-mcp-server@latest\"],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-aws-profile\",\n        \"AWS_REGION\": \"us-east-1\",\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/nova-canvas-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.nova-canvas-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"AWS_REGION=us-east-1\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/nova-canvas-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p>"},{"location":"servers/nova-canvas-mcp-server/#installing-via-smithery","title":"Installing via Smithery","text":"<p>To install Amazon Nova Canvas MCP Server for Claude Desktop automatically via Smithery:</p> <pre><code>npx -y @smithery/cli install @awslabs/nova-canvas-mcp-server --client claude\n</code></pre>"},{"location":"servers/nova-canvas-mcp-server/#aws-authentication_1","title":"AWS Authentication","text":"<p>The MCP server uses the AWS profile specified in the <code>AWS_PROFILE</code> environment variable. If not provided, it defaults to the \"default\" profile in your AWS configuration file.</p> <pre><code>\"env\": {\n  \"AWS_PROFILE\": \"your-aws-profile\",\n  \"AWS_REGION\": \"us-east-1\"\n}\n</code></pre> <p>Make sure the AWS profile has permissions to access Amazon Bedrock and Amazon Nova Canvas. The MCP server creates a boto3 session using the specified profile to authenticate with AWS services. Your AWS IAM credentials remain on your local machine and are strictly used for using the Amazon Bedrock model APIs.</p>"},{"location":"servers/postgres-mcp-server/","title":"AWS Labs postgres MCP Server","text":"<p>An AWS Labs Model Context Protocol (MCP) server for Aurora Postgres</p>"},{"location":"servers/postgres-mcp-server/#features","title":"Features","text":""},{"location":"servers/postgres-mcp-server/#natural-language-to-postgres-sql-query","title":"Natural language to Postgres SQL query","text":"<ul> <li>Converting human-readable questions and commands into structured Postgres-compatible SQL queries and executing them against the configured Aurora Postgres database.</li> </ul>"},{"location":"servers/postgres-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Aurora Postgres Cluster with Postgres username and password stored in AWS Secrets Manager</li> <li>Enable RDS Data API for your Aurora Postgres Cluster, see instructions here</li> <li>This MCP server can only be run locally on the same host as your LLM client.</li> <li>Docker runtime</li> <li>Set up AWS credentials with access to AWS services</li> <li>You need an AWS account with appropriate permissions</li> <li>Configure AWS credentials with <code>aws configure</code> or environment variables</li> </ol>"},{"location":"servers/postgres-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.postgres-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"awslabs.postgres-mcp-server@latest\",\n        \"--resource_arn\", \"[your data]\",\n        \"--secret_arn\", \"[your data]\",\n        \"--database\", \"[your data]\",\n        \"--region\", \"[your data]\",\n        \"--readonly\", \"True\"\n      ],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-aws-profile\",\n        \"AWS_REGION\": \"us-east-1\",\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre>"},{"location":"servers/postgres-mcp-server/#build-and-install-docker-image-locally-on-the-same-host-of-your-llm-client","title":"Build and install docker image locally on the same host of your LLM client","text":"<ol> <li>'git clone https://github.com/awslabs/mcp.git'</li> <li>Go to sub-directory 'src/postgres-mcp-server/'</li> <li>Run 'docker build -t awslabs/postgres-mcp-server:latest .'</li> </ol>"},{"location":"servers/postgres-mcp-server/#add-or-update-your-llm-clients-config-with-following","title":"Add or update your LLM client's config with following:","text":"<pre><code>\n{\n  \"mcpServers\": {\n    \"awslabs.postgres-mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"AWS_ACCESS_KEY_ID=[your data]\",\n        \"-e\", \"AWS_SECRET_ACCESS_KEY=[your data]\",\n        \"-e\", \"AWS_REGION=[your data]\",\n        \"awslabs/postgres-mcp-server:latest\",\n        \"--resource_arn\", \"[your data]\",\n        \"--secret_arn\", \"[your data]\",\n        \"--database\", \"[your data]\",\n        \"--region\", \"[your data]\",\n        \"--readonly\", \"True\"\n      ]\n    }\n  }\n}\n</code></pre> <p>NOTE: By default, only read-only queries are allowed and it is controlled by --readonly parameter above. Set it to False if you also want to allow writable DML or DDL.</p>"},{"location":"servers/postgres-mcp-server/#aws-authentication","title":"AWS Authentication","text":"<p>The MCP server uses the AWS profile specified in the <code>AWS_PROFILE</code> environment variable. If not provided, it defaults to the \"default\" profile in your AWS configuration file.</p> <pre><code>\"env\": {\n  \"AWS_PROFILE\": \"your-aws-profile\"\n}\n</code></pre> <p>Make sure the AWS profile has permissions to access the RDS data API, and the secret from AWS Secrets Manager. The MCP server creates a boto3 session using the specified profile to authenticate with AWS services. Your AWS IAM credentials remain on your local machine and are strictly used for accessing AWS services.</p>"},{"location":"servers/syntheticdata-mcp-server/","title":"Synthetic Data MCP Server","text":"<p>A Model Context Protocol (MCP) server for generating, validating, and managing synthetic data.</p>"},{"location":"servers/syntheticdata-mcp-server/#overview","title":"Overview","text":"<p>This MCP server provides tools for generating synthetic data based on business descriptions, executing pandas code safely, validating data structures, and loading data to storage systems like S3.</p>"},{"location":"servers/syntheticdata-mcp-server/#features","title":"Features","text":"<ul> <li>Business-Driven Generation: Generate synthetic data instructions based on business descriptions</li> <li>Data Generation Instructions: Generate structured data generation instructions from business descriptions</li> <li>Safe Pandas Code Execution: Run pandas code in a restricted environment with automatic DataFrame detection</li> <li>JSON Lines Validation: Validate and convert JSON Lines data to CSV format</li> <li>Data Validation: Validate data structure, referential integrity, and save as CSV files</li> <li>Referential Integrity Checking: Validate relationships between tables</li> <li>Data Quality Assessment: Identify potential issues in data models (3NF validation)</li> <li>Storage Integration: Load data to various storage targets (S3) with support for:</li> <li>Multiple file formats (CSV, JSON, Parquet)</li> <li>Partitioning options</li> <li>Storage class configuration</li> <li>Encryption settings</li> </ul>"},{"location":"servers/syntheticdata-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Set up AWS credentials with access to AWS services</li> <li>You need an AWS account with appropriate permissions</li> <li>Configure AWS credentials with <code>aws configure</code> or environment variables</li> </ol>"},{"location":"servers/syntheticdata-mcp-server/#installation","title":"Installation","text":"<pre><code>{\n  \"mcpServers\": {\n    \"awslabs.syntheticdata-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.syntheticdata-mcp-server\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"AWS_PROFILE\": \"your-aws-profile\",\n        \"AWS_REGION\": \"us-east-1\"\n      },\n      \"autoApprove\": [],\n      \"disabled\": false\n    }\n  }\n}\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p>"},{"location":"servers/syntheticdata-mcp-server/#aws-authentication","title":"AWS Authentication","text":"<p>The MCP server uses the AWS profile specified in the <code>AWS_PROFILE</code> environment variable. If not provided, it defaults to the \"default\" profile in your AWS configuration file.</p> <pre><code>\"env\": {\n  \"AWS_PROFILE\": \"your-aws-profile\"\n}\n</code></pre>"},{"location":"servers/syntheticdata-mcp-server/#usage","title":"Usage","text":""},{"location":"servers/syntheticdata-mcp-server/#getting-data-generation-instructions","title":"Getting Data Generation Instructions","text":"<pre><code>response = await server.get_data_generation_instructions(\n    business_description=\"An e-commerce platform with customers, orders, and products\"\n)\n</code></pre>"},{"location":"servers/syntheticdata-mcp-server/#executing-pandas-code","title":"Executing Pandas Code","text":"<pre><code>response = await server.execute_pandas_code(\n    code=\"your_pandas_code_here\",\n    workspace_dir=\"/path/to/workspace\",\n    output_dir=\"data\"\n)\n</code></pre>"},{"location":"servers/syntheticdata-mcp-server/#validating-and-saving-data","title":"Validating and Saving Data","text":"<pre><code>response = await server.validate_and_save_data(\n    data={\n        \"customers\": [{\"id\": 1, \"name\": \"John\"}],\n        \"orders\": [{\"id\": 101, \"customer_id\": 1}]\n    },\n    workspace_dir=\"/path/to/workspace\",\n    output_dir=\"data\"\n)\n</code></pre>"},{"location":"servers/syntheticdata-mcp-server/#loading-to-storage","title":"Loading to Storage","text":"<pre><code>response = await server.load_to_storage(\n    data={\n        \"customers\": [{\"id\": 1, \"name\": \"John\"}]\n    },\n    targets=[{\n        \"type\": \"s3\",\n        \"config\": {\n            \"bucket\": \"my-bucket\",\n            \"prefix\": \"data/\",\n            \"format\": \"parquet\"\n        }\n    }]\n)\n</code></pre>"},{"location":"servers/terraform-mcp-server/","title":"AWS Terraform MCP Server","text":"<p>MCP server for Terraform on AWS best practices, infrastructure as code patterns, and security compliance with Checkov.</p>"},{"location":"servers/terraform-mcp-server/#features","title":"Features","text":"<ul> <li>Terraform Best Practices - Get prescriptive Terraform advice for building applications on AWS</li> <li>AWS Well-Architected guidance for Terraform configurations</li> <li>Security and compliance recommendations</li> <li> <p>AWSCC provider prioritization for consistent API behavior</p> </li> <li> <p>Security-First Development Workflow - Follow a structured process for creating secure code</p> </li> <li>Step-by-step guidance for validation and security scanning</li> <li>Integration of Checkov at the right stages of development</li> <li> <p>Clear handoff points between AI assistance and developer deployment</p> </li> <li> <p>Checkov Integration - Work with Checkov for security and compliance scanning</p> </li> <li>Run security scans on Terraform code to identify vulnerabilities</li> <li>Automatically fix identified security issues when possible</li> <li> <p>Get detailed remediation guidance for compliance issues</p> </li> <li> <p>AWS Provider Documentation - Search for AWS and AWSCC provider resources</p> </li> <li>Find documentation for specific resources and attributes</li> <li>Get example snippets and implementation guidance</li> <li> <p>Compare AWS and AWSCC provider capabilities</p> </li> <li> <p>AWS-IA GenAI Modules - Access specialized modules for AI/ML workloads</p> </li> <li>Amazon Bedrock module for generative AI applications</li> <li>OpenSearch Serverless for vector search capabilities</li> <li>SageMaker endpoint deployment for ML model hosting</li> <li> <p>Serverless Streamlit application deployment for AI interfaces</p> </li> <li> <p>Terraform Registry Module Analysis - Analyze Terraform Registry modules</p> </li> <li>Search for modules by URL or identifier</li> <li>Extract input variables, output variables, and README content</li> <li>Understand module usage and configuration options</li> <li> <p>Analyze module structure and dependencies</p> </li> <li> <p>Terraform Workflow Execution - Run Terraform commands directly</p> </li> <li>Initialize, plan, validate, apply, and destroy operations</li> <li>Pass variables and specify AWS regions</li> <li>Get formatted command output for analysis</li> </ul>"},{"location":"servers/terraform-mcp-server/#tools-and-resources","title":"Tools and Resources","text":"<ul> <li>Terraform Development Workflow: Follow security-focused development process via <code>terraform://workflow_guide</code></li> <li>AWS Best Practices: Access AWS-specific guidance via <code>terraform://aws_best_practices</code></li> <li>AWS Provider Resources: Access resource listings via <code>terraform://aws_provider_resources_listing</code></li> <li>AWSCC Provider Resources: Access resource listings via <code>terraform://awscc_provider_resources_listing</code></li> </ul>"},{"location":"servers/terraform-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Install Terraform CLI for workflow execution</li> <li>Install Checkov for security scanning</li> </ol>"},{"location":"servers/terraform-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.terraform-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.terraform-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/terraform-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.terraform-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/terraform-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/terraform-mcp-server/#security-considerations","title":"Security Considerations","text":"<p>When using this MCP server, you should consider: - Following the structured development workflow that integrates validation and security scanning - Reviewing all Checkov warnings and errors manually - Fixing security issues rather than ignoring them whenever possible - Documenting clear justifications for any necessary exceptions - Using the RunCheckovScan tool regularly to verify security compliance - Preferring the AWSCC provider for its consistent API behavior and better security defaults</p> <p>Before applying Terraform changes to production environments, you should conduct your own independent assessment to ensure that your infrastructure would comply with your own specific security and quality control practices and standards, as well as the local laws, rules, and regulations that govern you and your content.</p>"}]}